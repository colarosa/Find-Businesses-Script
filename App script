// IMPORTANT: Replace 'XXXXX' with your own Google Maps Places API key.
// If you don't have one yet, you can generate it here:
// https://developers.google.com/maps/documentation/places/web-service/get-api-key

const API_KEY = 'XXXXX';

/**
 * Fetches phone number, website, and logo (if available) from Google Places Details API.
 *
 * @param {string} placeId - The unique identifier for the place.
 * @returns {object} - An object containing phone, website, and logo URL.
 */
function getBusinessDetails(placeId, photoRef) {
  if (!placeId) return { phone: 'N/A', website: 'N/A', logo: photoRef ? getPhotoUrl(photoRef) : 'N/A' };

  const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=formatted_phone_number,website&key=${API_KEY}`;
  
  try {
    const response = UrlFetchApp.fetch(detailsUrl);
    const detailsData = JSON.parse(response.getContentText());

    if (detailsData.status === 'OK' && detailsData.result) {
      return {
        phone: detailsData.result.formatted_phone_number || 'N/A',
        website: detailsData.result.website || 'N/A',
        logo: photoRef ? getPhotoUrl(photoRef) : 'N/A'
      };
    }
  } catch (e) {
    Logger.log("Error fetching details for placeId " + placeId + ": " + e.toString());
  }

  return { phone: 'N/A', website: 'N/A', logo: photoRef ? getPhotoUrl(photoRef) : 'N/A' };
}

/**
 * Constructs the Google Places Photo API URL to fetch the business's logo or image.
 *
 * @param {string} photoRef - The photo reference ID returned by the Places API.
 * @returns {string} - A direct URL to the business image.
 */
function getPhotoUrl(photoRef) {
  return `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photoRef}&key=${API_KEY}`;
}

/**
 * Fetches businesses from Google Places API and writes the results to a new worksheet.
 * Expands the radius dynamically to find more results up to maxResults.
 *
 * @param {string} industry - Business category or keyword to search for.
 * @param {string} location - Location to search in.
 * @param {string} [type] - (Optional) Specific business type.
 * @param {number} [maxResults=60] - Maximum number of results to fetch.
 */
function getBusinesses(industry, location, type = '', maxResults = 60) {
  if (!industry || !location) {
    Logger.log("Error: 'industry' and 'location' parameters are required.");
    return;
  }
  
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const timeStamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyyMMdd_HHmmss");
  const sheetName = `${industry} - ${location} ${timeStamp}`;
  const sheet = spreadsheet.insertSheet(sheetName);
  
  const headers = ['Business Name', 'Address', 'Rating', 'Phone Number', 'Website', 'Logo URL'];
  sheet.appendRow(headers);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight("bold");
  Logger.log('Headers added and formatted bold in new sheet: ' + sheetName);
  
  let existingAddresses = new Set();
  
  let currentRadius = 10000;
  const radiusIncrement = 10000;
  const maxSearchRadius = 50000;
  let totalNewResults = [];
  
  while (totalNewResults.length < maxResults && currentRadius <= maxSearchRadius) {
    let url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(industry)}+in+${encodeURIComponent(location)}&radius=${currentRadius}&key=${API_KEY}`;
    if (type) url += `&type=${encodeURIComponent(type)}`;
    
    let nextPageToken = null;
    let attemptCount = 0;
    let resultsForRadius = [];
    
    try {
      do {
        Logger.log(`Fetching page ${attemptCount + 1} for radius ${currentRadius} meters: ${url}`);
        const response = UrlFetchApp.fetch(url);
        const data = JSON.parse(response.getContentText());
        
        if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {
          throw new Error(`API error: ${data.status}${data.error_message ? ' - ' + data.error_message : ''}`);
        }
        
        if (data.results && data.results.length > 0) {
          resultsForRadius = resultsForRadius.concat(data.results);
        }
        
        nextPageToken = data.next_page_token || null;
        
        if (resultsForRadius.length >= maxResults) break;
        
        if (nextPageToken) {
          Utilities.sleep(2000);
          url = `https://maps.googleapis.com/maps/api/place/textsearch/json?pagetoken=${nextPageToken}&key=${API_KEY}`;
          if (type) url += `&type=${encodeURIComponent(type)}`;
        }
        
        attemptCount++;
      } while (nextPageToken && attemptCount < 3);
    } catch (error) {
      Logger.log(`Error: ${error.toString()}`);
      break;
    }
    
    resultsForRadius.forEach(business => {
      const address = business.formatted_address || 'N/A';
      if (!existingAddresses.has(address)) {
        existingAddresses.add(address);
        totalNewResults.push(business);
      }
    });
    
    Logger.log(`Radius ${currentRadius} meters yielded ${resultsForRadius.length} results; total unique businesses so far: ${totalNewResults.length}`);
    
    if (totalNewResults.length < maxResults) {
      currentRadius += radiusIncrement;
    }
  }
  
  const slicedResults = totalNewResults.slice(0, maxResults);
  
  const rows = slicedResults.map(business => {
    const address = business.formatted_address || 'N/A';
    const photoRef = business.photos && business.photos.length > 0 ? business.photos[0].photo_reference : null;
    const details = getBusinessDetails(business.place_id, photoRef);
    return [
      business.name || 'N/A',
      address,
      business.rating || 'N/A',
      details.phone,
      details.website,
      details.logo
    ];
  });
  
  if (rows.length > 0) {
    sheet.getRange(sheet.getLastRow() + 1, 1, rows.length, rows[0].length).setValues(rows);
    Logger.log(`Fetched and wrote ${rows.length} new businesses to sheet: ${sheetName}`);
  } else {
    Logger.log('No new businesses to add.');
  }
}

/**
 * Main function to fetch businesses.
 */
function main() {
  // Example: Get "swimming lessons" in "Toronto"
  getBusinesses('language class kids', 'Toronto', 'school', 100);
}


main();
