// IMPORTANT: Replace 'XXXXX' with your own Google Maps Places API key.
// If you don't have one yet, you can generate it here:
// https://developers.google.com/maps/documentation/places/web-service/get-api-key

const API_KEY = 'XXXXX';

/**
 * List of kids' activity categories
 */
const CATEGORIES = [
  'Karate class for kids', 'Daycares', 'Coding club for kids', 'Chess club for kids', 'Language club for kids',
  'Gymnastics classes', 'Music lessons for kids', 'Dance schools', 'Art classes for kids', 'Swimming lessons',
  'Summer camps', 'Science clubs', 'Math tutoring for kids', 'Robotics for kids', 'Outdoor adventure parks',
  'Storytime at libraries', 'Kids cooking classes', 'Soccer training for kids', 'Basketball training',
  'Ballet for kids', 'Theater acting for kids', 'STEM workshops', 'Lego building clubs', 'Creative writing for kids', 'Public speaking for kids'
];

/**
 * Fetches business details including phone, website, logo, hours, and categorization.
 */
function getBusinessDetails(placeId, photoRef) {
  if (!placeId) return {
    phone: 'N/A', website: 'N/A', logo: getPhotoUrl(photoRef), 
    hours: 'N/A', ageRange: 'N/A', onlineAvailable: 'N/A'
  };

  const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_phone_number,website,opening_hours&key=${API_KEY}`;
  
  try {
    const response = UrlFetchApp.fetch(detailsUrl);
    const detailsData = JSON.parse(response.getContentText());

    if (detailsData.status === 'OK' && detailsData.result) {
      const name = detailsData.result.name || 'Unknown'; 
      const openingHours = detailsData.result.opening_hours || {};
      return {
        phone: detailsData.result.formatted_phone_number || 'N/A',
        website: detailsData.result.website || 'N/A',
        logo: getPhotoUrl(photoRef),
        hours: openingHours.weekday_text ? openingHours.weekday_text.join(' | ') : 'N/A',
        ageRange: categorizeByAge(name),
        onlineAvailable: checkOnlineAvailability(detailsData.result.website)
      };
    }
  } catch (e) {
    Logger.log("Error fetching details for placeId " + placeId + ": " + e.toString());
  }

  return {
    phone: 'N/A', website: 'N/A', logo: getPhotoUrl(photoRef), 
    hours: 'N/A', ageRange: 'N/A', onlineAvailable: 'N/A'
  };
}

/**
 * Constructs the Google Places Photo API URL for logos.
 */
function getPhotoUrl(photoRef) {
  return photoRef ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photoRef}&key=${API_KEY}` : 'N/A';
}

/**
 * Categorizes activities by age group based on keywords.
 */
function categorizeByAge(name) {
  if (!name) return 'All Ages';
  const lowerName = name.toLowerCase();
  if (lowerName.includes('toddler') || lowerName.includes('preschool')) return '2-5 years';
  if (lowerName.includes('junior') || lowerName.includes('kids')) return '6-10 years';
  if (lowerName.includes('teen') || lowerName.includes('youth')) return '11+ years';
  return 'All Ages';
}

/**
 * Determines if an activity offers online options based on its website URL.
 */
function checkOnlineAvailability(website) {
  if (!website || website === 'N/A') return 'No';
  const keywords = ['online', 'virtual', 'zoom', 'livestream'];
  return keywords.some(keyword => website.includes(keyword)) ? 'Yes' : 'No';
}

/**
 * Fetches businesses from Google Places API and writes results to a new worksheet.
 */
function getBusinesses(category, location, type = '', maxResults = 60) {
  if (!category || !location) {
    Logger.log("Error: 'category' and 'location' parameters are required.");
    return;
  }
  
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = spreadsheet.getSheetByName(category);
  
  if (!sheet) {
    sheet = spreadsheet.insertSheet(category);
    const headers = ['Business Name', 'Address', 'Rating', 'Total Reviews', 'Phone Number', 'Website', 'Logo URL', 'Business Hours', 'Age Range', 'Online Available'];
    sheet.appendRow(headers);
    sheet.getRange(1, 1, 1, headers.length).setFontWeight("bold");
  }

  let existingAddresses = new Set();
  let currentRadius = 10000;
  const radiusIncrement = 10000;
  const maxSearchRadius = 50000;
  let totalNewResults = [];
  
  while (totalNewResults.length < maxResults && currentRadius <= maxSearchRadius) {
    let url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(category)}+in+${encodeURIComponent(location)}&radius=${currentRadius}&key=${API_KEY}`;
    if (type) url += `&type=${encodeURIComponent(type)}`;
    
    let nextPageToken = null;
    let attemptCount = 0;
    let resultsForRadius = [];
    
    try {
      do {
        const response = UrlFetchApp.fetch(url);
        const data = JSON.parse(response.getContentText());
        
        if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {
          throw new Error(`API error: ${data.status}${data.error_message ? ' - ' + data.error_message : ''}`);
        }
        
        if (data.results && data.results.length > 0) {
          resultsForRadius = resultsForRadius.concat(data.results);
        }
        
        nextPageToken = data.next_page_token || null;
        if (resultsForRadius.length >= maxResults) break;
        if (nextPageToken) Utilities.sleep(2000);
        
        attemptCount++;
      } while (nextPageToken && attemptCount < 3);
    } catch (error) {
      Logger.log(`Error: ${error.toString()}`);
      break;
    }
    
    resultsForRadius.forEach(business => {
      const address = business.formatted_address || 'N/A';
      if (!existingAddresses.has(address)) {
        existingAddresses.add(address);
        totalNewResults.push(business);
      }
    });

    if (totalNewResults.length < maxResults) currentRadius += radiusIncrement;
  }
  
  const rows = totalNewResults.map(business => {
    const details = getBusinessDetails(business.place_id, business.photos?.[0]?.photo_reference);
    return [
      business.name || 'N/A', business.formatted_address || 'N/A', business.rating || 'N/A',
      business.user_ratings_total || 0, details.phone, details.website, details.logo, details.hours, details.ageRange, details.onlineAvailable
    ];
  });

  if (rows.length > 0) sheet.getRange(sheet.getLastRow() + 1, 1, rows.length, rows[0].length).setValues(rows);
}

/**
 * Runs the script for all categories.
 */
function main() {
  CATEGORIES.forEach(category => getBusinesses(category, 'Toronto'));
}

main();
